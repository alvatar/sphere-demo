(define-cond-expand-feature compile-to-c)
(define-cond-expand-feature debug)
(define-cond-expand-feature android)
(define-cond-expand-feature mobile)
(include "/usr/local/Gambit-C/spheres/core/src/ffi-prelude.scm")
(cond-expand
 (optimize
  (declare (standard-bindings) (extended-bindings) (not safe) (block)))
 (debug (declare
          (safe)
          (debug)
          (debug-location)
          (debug-source)
          (debug-environments)))
 (else (void)))
(define u8vector-subtype (##subtype (u8vector)))
(define s8vector-subtype (##subtype (s8vector)))
(define u16vector-subtype (##subtype (u16vector)))
(define s16vector-subtype (##subtype (s16vector)))
(define u32vector-subtype (##subtype (u32vector)))
(define s32vector-subtype (##subtype (s32vector)))
(define u64vector-subtype (##subtype (u64vector)))
(define s64vector-subtype (##subtype (s64vector)))
(define f32vector-subtype (##subtype (f32vector)))
(define f64vector-subtype (##subtype (f64vector)))
(define-writer write-s8 s8vector)
(define-reader read-s8 s8vector s8vector-subtype s8vector-ref 0)
(define-writer write-u16 u16vector)
(define-reader read-u16 u16vector u16vector-subtype u16vector-ref 0)
(define-writer write-s16 s16vector)
(define-reader read-s16 s16vector s16vector-subtype s16vector-ref 0)
(define-writer write-u32 u32vector)
(define-reader read-u32 u32vector u32vector-subtype u32vector-ref 0)
(define-writer write-s32 s32vector)
(define-reader read-s32 s32vector s32vector-subtype s32vector-ref 0)
(define-writer write-u64 u64vector)
(define-reader read-u64 u64vector u64vector-subtype u64vector-ref 0)
(define-writer write-s64 s64vector)
(define-reader read-s64 s64vector s64vector-subtype s64vector-ref 0)
(define-writer write-f32 f32vector)
(define-reader read-f32 f32vector f32vector-subtype f32vector-ref 0.)
(define-writer write-f64 f64vector)
(define-reader read-f64 f64vector f64vector-subtype f64vector-ref 0.)
(define *ffi-writer-transformers* (make-table test: eq?))
(define *writer-default* #f)
(define (ffi-write-transformer-add! type serializer-proc)
  (table-set! *ffi-writer-transformers* type serializer-proc))
(define (%%sexp-ext:wr we obj)
  (if (##foreign? obj)
      (let* ((name (let ((v (foreign-tags obj))) (and (pair? v) (car v))))
             (transformer (table-ref *ffi-writer-transformers* name #f)))
        (if transformer
            (let ((transformed-to (transformer obj)))
              (##wr-str we "#.")
              (*writer-default* we transformed-to))
            (##wr-foreign we obj)))
      (*writer-default* we obj)))
(define (%%sexp-ext-install!)
  (and (not (eq? *writer-default* ##wr))
       (begin
         (set! *writer-default* ##wr)
         (set! ##wr %%sexp-ext:wr)
         (let* ((port (repl-input-port)) (rt (input-port-readtable port)))
           (input-port-readtable-set! port (readtable-eval-allowed?-set rt #t))
           (void)))))
(%%sexp-ext-install!)
(define (string->object s)
  (call-with-input-string
   s
   (lambda (port)
     (input-port-readtable-set!
      port
      (readtable-eval-allowed?-set (input-port-readtable port) #t))
     (read port))))
(c-declare "#include <stdlib.h>")
(define calloc (c-lambda (unsigned-int unsigned-int) (pointer void) "calloc"))
(define malloc (c-lambda (unsigned-int) (pointer void) "malloc"))
(define realloc
  (c-lambda ((pointer void) unsigned-int) (pointer void) "realloc"))
(define free (c-lambda ((pointer void #f)) void "free"))
(define *-offset
  (c-lambda
   ((pointer void #f) int)
   (pointer void #f)
   "___result_voidstar = ((void*)___arg1_voidstar) + ___arg2;"))
(define *->void*
  (c-lambda
   ((pointer void #f))
   (pointer void #f)
   "___result_voidstar = (void*)___arg1_voidstar;"))
(define integer->void*
  (c-lambda
   (unsigned-long-long)
   (pointer void #f)
   "___result_voidstar = (void*)___arg1;"))
(define *->string
  (c-lambda ((pointer void #f)) char-string "___result = ___arg1_voidstar;"))
(c-declare "#include <stdint.h>")
(c-define-sizeof char)
(c-define-array char scheme-vector: s8)
(c-define-sizeof unsigned-char c-type: "unsigned char")
(c-define-array unsigned-char c-type: "unsigned char" scheme-vector: u8)
(c-define-sizeof short)
(c-define-array short scheme-vector: s16)
(c-define-sizeof unsigned-short c-type: "unsigned short")
(c-define-array unsigned-short c-type: "unsigned short" scheme-vector: u16)
(c-define-sizeof int)
(c-define-array int scheme-vector: s32)
(c-define-sizeof unsigned-int c-type: "unsigned int")
(c-define-array unsigned-int c-type: "unsigned int" scheme-vector: u32)
(c-define-sizeof long)
(c-define-array long scheme-vector: s64)
(c-define-sizeof unsigned-long c-type: "unsigned long")
(c-define-array unsigned-long c-type: "unsigned long" scheme-vector: u64)
(c-define-sizeof float)
(c-define-array float scheme-vector: f32)
(c-define-sizeof double)
(c-define-array double scheme-vector: f32)
